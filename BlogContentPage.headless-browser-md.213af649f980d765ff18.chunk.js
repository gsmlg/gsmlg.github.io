(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{"./app/data/blogs/headless-browser.md":function(s,e){s.exports='<h1 id=->概述</h1> <p>无界面浏览器 &lt;<code>headdless mode</code>&gt; 在进行自动化测试和服务器上运行时非常有用。</p> <p>在服务器上，可能需要运行浏览器去执行一些特殊的任务，但是服务器上是没有X Window系统，这个时候 就需要使用无界面浏览器了。</p> <p>无界面浏览器可以去打开一些真正的页面，并且渲染，然后输出到html，pdf或图片。</p> <p>无界面浏览器还可以打开调试端口，在没有图形界面的情况下，调试真正的浏览器页面。</p> <h2 id=chrome>Chrome</h2> <p>Chrome 从版本59开始，提供了无界面浏览功能，使用方式如下:</p> <pre class=hljs><code class=language-shell>chrome \\\n  --headless \\                   # Runs Chrome in headless mode.\n  --disable-gpu \\                # Temporarily needed for now.\n  --remote-debugging-port=9222 \\\n  https://www.chromestatus.com   # URL to open. Defaults to about:blank.</code></pre><ul> <li>chrome命令设置：</li> </ul> <pre class=hljs><code class=language-shell>alias chrome="/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"\nalias chrome-canary="/Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary"\nalias chromium="/Applications/Chromium.app/Contents/MacOS/Chromium"</code></pre><p>Chrome headless mode 提供了很多强大功能：</p> <ul> <li><p>输出DOM结构</p> <p><code>--dump-dom</code> flag会输出<code>document.body.innerHTML</code></p> </li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --dump-dom https://www.chromestatus.com/</code></pre><ul> <li>输出PDF</li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --print-to-pdf https://www.chromestatus.com/</code></pre><ul> <li>输出截图</li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --screenshot https://www.chromestatus.com/\n<span class=hljs-meta>\n#</span><span class=bash> Size of a standard letterhead.</span>\nchrome --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/\n<span class=hljs-meta>\n#</span><span class=bash> Nexus 5x</span>\nchrome --headless --disable-gpu --screenshot --window-size=412,732 https://www.chromestatus.com/</code></pre><ul> <li><p>REPL</p> <p><code>--repl</code> 会打开一个JS Console</p> </li> </ul> <pre class=hljs><code class=language-shell><span class=hljs-meta>$</span><span class=bash> chrome --headless --<span class=hljs-built_in>disable</span>-gpu --repl https://www.chromestatus.com/</span>\n[0608/112805.245285:INFO:headless_shell.cc(278)] Type a Javascript expression to evaluate or "quit" to exit.\n<span class=hljs-meta>&gt;</span><span class=bash>&gt;&gt; location.href</span>\n{"result":{"type":"string","value":"https://www.chromestatus.com/features"}}\n<span class=hljs-meta>&gt;</span><span class=bash>&gt;&gt; quit</span>\n<span class=hljs-meta>$</span><span class=bash></span></code></pre><ul> <li><p>远程调试</p> <p><code>--remote-debugging-port=9222</code> 会打开调试端口，调试基于<code>DevTools protocol</code>协议 可以通过编辑器连接，来进行远程调试。</p> </li> </ul> <h3 id=node->Node 编程接口</h3> <p><strong>The Puppeteer API</strong></p> <p>Puppeteer is a Node library developed by the Chrome team. It provides a high-level API to control headless (or full) Chrome. It&#39;s similar to other automated testing libraries like Phantom and NightmareJS, but it only works with the latest versions of Chrome.</p> <p>Among other things, Puppeteer can be used to easily take screenshots, create PDFs, navigate pages, and fetch information about those pages. I recommend the library if you want to quickly automate browser testing. It hides away the complexities of the DevTools protocol and takes care of redundant tasks like launching a debug instance of Chrome.</p> <p>Install it:</p> <pre class=hljs><code class=language-shell>yarn add puppeteer</code></pre><p>Example - print the user agent</p> <pre class=hljs><code class=language-js><span class=hljs-keyword>const</span> puppeteer = <span class=hljs-built_in>require</span>(<span class=hljs-string>\'puppeteer\'</span>);\n\n<span class=hljs-function>(<span class=hljs-params><span class=hljs-keyword>async</span>(</span>) =&gt;</span> {\n  <span class=hljs-keyword>const</span> browser = <span class=hljs-keyword>await</span> puppeteer.launch();\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>await</span> browser.version());\n  browser.close();\n})();</code></pre><p>Example - taking a screenshot of the page</p> <pre class=hljs><code class=language-js><span class=hljs-keyword>const</span> puppeteer = <span class=hljs-built_in>require</span>(<span class=hljs-string>\'puppeteer\'</span>);\n\n<span class=hljs-function>(<span class=hljs-params><span class=hljs-keyword>async</span>(</span>) =&gt;</span> {\n\n<span class=hljs-keyword>const</span> browser = <span class=hljs-keyword>await</span> puppeteer.launch();\n<span class=hljs-keyword>const</span> page = <span class=hljs-keyword>await</span> browser.newPage();\n<span class=hljs-keyword>await</span> page.goto(<span class=hljs-string>\'https://www.chromestatus.com\'</span>, {<span class=hljs-attr>waitUntil</span>: <span class=hljs-string>\'networkidle\'</span>});\n<span class=hljs-keyword>await</span> page.pdf({<span class=hljs-attr>path</span>: <span class=hljs-string>\'page.pdf\'</span>, <span class=hljs-attr>format</span>: <span class=hljs-string>\'A4\'</span>});\n\nbrowser.close();\n})();</code></pre><p>Check out <a href=https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md>Puppeteer&#39;s documentation</a> to learn more about the full API.</p> <h2 id=firefox>Firefox</h2> <p>Headless Firefox works on Fx55+ on Linux, and 56+ on Windows/Mac.</p> <p>从Firefox 57开始，Firefox开始支持截图</p> <pre class=hljs><code class="language-undefined">/path/<span class=hljs-keyword>to</span>/firefox -headless -<span class=hljs-built_in>screenshot</span> https:<span class=hljs-comment>//developer.mozilla.com</span></code></pre><ul> <li><code>-screenshot</code> name url — Set a custom name for the screenshot by including it between the -screenshot flag and the URL you want to capture. Note that you can specify other web-compatible image formats such as .jpg, .bmp, etc.</li> <li><code>--window-size=x</code> — Set a custom viewport width when taking the screenshot (full height is maintained). Note that the single argument version of this doesn&#39;t work.</li> <li><code>--window-size=x,y</code> — Set a custom viewport width and height to capture.</li> </ul> <p>Firefox headless 模式可以用于自动化测试，基于<code>Selenium</code>。</p> <p>MDN的<a href=https://github.com/mdn/headless-examples><code>headless-example</code></a></p> '}}]);