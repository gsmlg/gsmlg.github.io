(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./app/data/blogs/using-docker.md":function(s,a){s.exports='<h1 id=using-docker>Using Docker</h1> <h2 id=-docker>什么是Docker</h2> <p>Docker利用现有的Linux容器技术，以不同方式将其封装及扩展 --主要是通过提供可以值的镜像，以及一个用户友好的接口 --来创建一套完整的容器创建及发布方案</p> <p>Docker平台拥有两个不同部分</p> <ul> <li>负责创建与运行容器的 Docker Engine</li> <li>用来发布容器的云服务 Docker Hub</li> </ul> <p>Docker的哲学经常用航运集装箱的比喻来解释，这或许能解释 Docker 名字的由来。</p> <p>这个比喻大概是这样：</p> <pre class=hljs><code class="language-undefined">运输货物时，要用到不同的运输工具，可能包括货车、叉车、起重机、火车和轮船。\n这意味着这些工具必须可以处理大小不一，运输需求各异的货物。\n以往这是一道复杂的工序，需要付出大量的人力、物力。\n联运集装箱的诞生为运输产业带来了一场革命。\n集装箱的大小有了统一标准，并且设计的出发点是能以最少的人力在不同的运输方式之间搬运。\n所有运输机械都为运送集装箱而设计。运输不同类型物品可以使用不同的集装箱。\n因此运输产业只需要专注于处理集装箱的运输及存储问题，而集装箱内的物品完全由生产商负责。\n\n<span class=hljs-symbol>Docker</span> 的目的是把集装箱的标准化流程运用到<span class=hljs-keyword>IT行业中去。\n</span>如今的典型系统可能包括Javascript框架、NoSQL数据库、消息队列、REST API，\n以及由各个不同编程语言所写的后端。\n而这个组合的全部或部分可能需要运行到不同的环境中，从开发者的笔记本电脑， 到公司内的测试集群，再到云端的生产环境。\n每个环境都存在差异，他们存在不同的操作系统和不同的程序库。我们需要付出巨大的人力来在不同环境之间移动这些应用。\n<span class=hljs-symbol>Docker</span>容器简化了应用程序的移动，好比集装箱一样。\n开发人员只需专注开发，再也不用担心测试和发布时环境以及依赖关系带来的问题。\n运维部门只需专注于运行容器的核心问题。</code></pre><h2 id=-docker>安装Docker</h2> <p>Docker需要运行于64位的Linux系统上，内核版本需要大于3.10</p> <p>macOS可以从<code>docker.com</code>下载到docker-ce版本安装使用</p> <p>可以使用<code>homebrew</code>来安装</p> <pre class=hljs><code class="language-undefined"><span class=hljs-keyword>brew </span>cask <span class=hljs-keyword>install </span>docker</code></pre><h2 id=-docker>运行Docker</h2> <h3 id=images->images 镜像</h3> <p>docker镜像是一个构建好的docker环境，可以使用docker直接启动一个镜像</p> <pre class=hljs><code class="language-undefined">docker <span class=hljs-keyword>run</span><span class=bash> debian</span></code></pre><p>运行镜像会自动从<code>docker hub</code>下载对应的镜像，并运行</p> <p>运行镜像会自动创建一个container</p> <p>查看运行中的container：</p> <pre class=hljs><code class="language-undefined"><span class=hljs-attribute>docker ps</span></code></pre><p>运行一个交互式镜像</p> <pre class=hljs><code class="language-undefined">docker <span class=hljs-keyword>run</span><span class=bash> --rm -it gsmlg/phoenix\n</span><span class=hljs-comment># -i interactive</span>\n<span class=hljs-comment># -t terminal</span>\n<span class=hljs-comment># --rm remove after run</span></code></pre><p>当docker运行后会生成一个container 可以通过</p> <pre class=hljs><code class="language-undefined"><span class=hljs-attribute>docker ps -a</span></code></pre><p>查看所有docker containers</p> <p>删除无用的container</p> <pre class=hljs><code class="language-undefined">docker rm -v $(docker ps -aq -f <span class=hljs-attribute>status</span>=exited)</code></pre><h3 id=docker->Docker 镜像构建与发布</h3> <h4 id=dockerfile>Dockerfile</h4> <p>docker 构建一个镜像需要通过Dockerfile文件来配置镜像的内容</p> <p>一个构建的Dockerfile内容：</p> <pre class=hljs><code class="language-undefined"><span class=hljs-keyword>FROM</span> alpine\n\n<span class=hljs-keyword>MAINTAINER</span> GSMLG &lt; me@gsmlg.org &gt;\n\n<span class=hljs-keyword>RUN</span><span class=bash> apk update \\\n    &amp;&amp; apk add curl \\\n    &amp;&amp; apk add stunnel \\\n    &amp;&amp; apk add squid \\\n    &amp;&amp; rm -rf /var/cache/apk/*\n</span>\n<span class=hljs-keyword>COPY</span><span class=bash> stunnel.conf pkey.pem cert.pem /etc/stunnel/\n</span>\n<span class=hljs-keyword>EXPOSE</span> <span class=hljs-number>443</span>\n\n<span class=hljs-keyword>COPY</span><span class=bash> entrypoint.sh /\n</span>\n<span class=hljs-keyword>ENTRYPOINT</span><span class=bash> [<span class=hljs-string>"/entrypoint.sh"</span>]</span></code></pre><p>Dockerfile 配置说明</p> <h4 id=push-and-pull>push and pull</h4> <p><code>push</code>: 将本地镜像推送到远程</p> <p><code>pull</code>: 拉取远程镜像</p> <h3 id=-docker-compose->通过Docker Compose运行</h3> <p>docker compose 通过yaml指定docker启动配置参数</p> <h4 id=docker-registry>Docker Registry</h4> <pre class=hljs><code class="language-undefined"><span class=hljs-symbol>registry:</span>\n  <span class=hljs-symbol>restart:</span> always\n  <span class=hljs-symbol>image:</span> <span class=hljs-symbol>registry:</span><span class=hljs-number>2</span>\n  <span class=hljs-symbol>ports:</span>\n    - <span class=hljs-number>127.0</span>.<span class=hljs-number>0.1</span>:<span class=hljs-number>5000</span>:<span class=hljs-number>5000</span>\n  <span class=hljs-symbol>volumes:</span>\n    - ./<span class=hljs-symbol>data:</span>/var/<span class=hljs-class><span class=hljs-keyword>lib</span>/<span class=hljs-title>registry</span></span>\n</code></pre><h3 id=docker-machine>Docker Machine</h3> <p>运行本地或远程的docker主机</p> <p>自动创建管理移除</p> '}}]);