(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"./app/data/blogs/redux-tutorial.md":function(s,a){s.exports="<h3 id=redux->Redux 简述</h3> <p>Redux 提供给应用一个可预测的状态管理机制，可以运行于不同的环境</p> <p>Redux 设计API简单，清晰，测试方便，易于上手</p> <h3 id=redux-api->Redux 核心API介绍</h3> <ul> <li><p>store</p> <p>全局唯一的状态存贮库，内部维护一个不可变对象树</p> <p>store 需要包含3个方法：</p> <ul> <li><code>dispatch</code> 用来接受action</li> <li><code>getState</code> 返回store内的状态</li> <li><code>subscribe</code> 接受一个回调，在状态更新后会触发回调</li> </ul> </li> <li><p>action</p> <p>需要修改store状态时，发送给store</p> <p>action 必须包含一个<code>type</code>属性，用于reducer匹配</p> </li> <li><p>reducer</p> <p>store接受到Action后，根据action来指定更新数据的方法</p> <p>接受参数 <code>state</code>, <code>action</code> 返回更新后的state</p> </li> </ul> <h3 id=->简单实现</h3> <pre class=hljs><code class=language-javascript>\n<span class=hljs-keyword>const</span> ADD = <span class=hljs-string>'ADD'</span>;\n\n<span class=hljs-keyword>const</span> reducer = <span class=hljs-function>(<span class=hljs-params>state, action</span>) =&gt;</span> {\n  <span class=hljs-keyword>switch</span>(action.type) {\n    <span class=hljs-keyword>case</span> ADD:\n      <span class=hljs-keyword>return</span> {<span class=hljs-attr>value</span>: state.value + action.value}\n    <span class=hljs-keyword>default</span>:\n      <span class=hljs-keyword>return</span> state;\n  }\n}\n\n<span class=hljs-keyword>const</span> createStore = <span class=hljs-function>(<span class=hljs-params>reducer</span>) =&gt;</span> {\n  <span class=hljs-keyword>let</span> listeners = []\n  <span class=hljs-keyword>let</span> state = {<span class=hljs-attr>value</span>: <span class=hljs-number>0</span>}\n\n  <span class=hljs-keyword>let</span> dispatch = <span class=hljs-function>(<span class=hljs-params>action</span>) =&gt;</span> {\n    state = reducer(state, action)\n    listeners.forEach(<span class=hljs-function><span class=hljs-params>cb</span> =&gt;</span> cb())\n  }\n\n  <span class=hljs-keyword>return</span> {\n    <span class=hljs-attr>getState</span>: <span class=hljs-function><span class=hljs-params>_</span>=&gt;</span> state,\n    <span class=hljs-attr>subscribe</span>: <span class=hljs-function>(<span class=hljs-params>cb</span>)=&gt;</span> listeners.push(cb),\n    <span class=hljs-attr>dispatch</span>: dispatch\n  }\n}\n\n<span class=hljs-keyword>const</span> store = createStore(reducer)\n\nstore.subscribe(<span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> <span class=hljs-built_in>console</span>.log(store.getState()))\n\nstore.dispatch({<span class=hljs-attr>type</span>: ADD, <span class=hljs-attr>value</span>: <span class=hljs-number>5</span>})\n\nstore.dispatch({<span class=hljs-attr>type</span>: ADD, <span class=hljs-attr>value</span>: <span class=hljs-number>10</span>})\n\n\n</code></pre><h3 id=->三大原则</h3> <ul> <li><p>单一数据源</p> </li> <li><p>State 是只读的</p> </li> <li><p>使用纯函数执行修改</p> </li> </ul> <h3 id=->相关技术</h3> <ul> <li><p>函数式编程</p> </li> <li><p>Flux</p> </li> <li><p>Immutable</p> </li> </ul> "}}]);