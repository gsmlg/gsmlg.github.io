{"pageProps":{"slug":"redux-tutorial","blog":{"id":4,"name":"redux-tutorial","title":"Redux Tutorial","date":"2017-06-21","author":"Gao","content":"### Redux 简述\n\nRedux 提供给应用一个可预测的状态管理机制，可以运行于不同的环境\n\nRedux 设计 API 简单，清晰，测试方便，易于上手\n\n### Redux 核心 API 介绍\n\n- store\n\n  全局唯一的状态存贮库，内部维护一个不可变对象树\n\n  store 需要包含 3 个方法：\n\n  - `dispatch` 用来接受 action\n  - `getState` 返回 store 内的状态\n  - `subscribe` 接受一个回调，在状态更新后会触发回调\n\n- action\n\n  需要修改 store 状态时，发送给 store\n\n  action 必须包含一个`type`属性，用于 reducer 匹配\n\n- reducer\n\n  store 接受到 Action 后，根据 action 来指定更新数据的方法\n\n  接受参数 `state`, `action` 返回更新后的 state\n\n### 简单实现\n\n```javascript\nconst ADD = 'ADD';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD:\n      return { value: state.value + action.value };\n    default:\n      return state;\n  }\n};\n\nconst createStore = reducer => {\n  let listeners = [];\n  let state = { value: 0 };\n\n  let dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(cb => cb());\n  };\n\n  return {\n    getState: _ => state,\n    subscribe: cb => listeners.push(cb),\n    dispatch: dispatch,\n  };\n};\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => console.log(store.getState()));\n\nstore.dispatch({ type: ADD, value: 5 });\n\nstore.dispatch({ type: ADD, value: 10 });\n```\n\n### 三大原则\n\n- 单一数据源\n\n- State 是只读的\n\n- 使用纯函数执行修改\n\n### 相关技术\n\n- 函数式编程\n\n- Flux\n\n- Immutable\n"}},"__N_SSG":true}