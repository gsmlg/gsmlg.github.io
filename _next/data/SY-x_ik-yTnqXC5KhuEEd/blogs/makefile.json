{"pageProps":{"slug":"makefile","blog":{"id":17,"slug":"makefile","title":"Makefile使用","date":"2018-05-16","author":"Gao","content":"## 为什么使用 make\n\n在项目中部署使用了 makefile 配置,来方便快速的执行一些工作流\n\n相比于其它 task runner，make 的优势是不需要安装，所有系统当前都已经预置\n\n方便，是最大的原因\n\n目前使用的 makefile 如下：\n\n```makefile\nGREEN=\\033[0;32m\nNC=\\033[0m\nINSTALL_DIR=/usr/local/public\nPUBLIC=./public\nHOST=10.1.101.60\nTARFILE=assets.tar.bz2\nHASHFILE=assets.hash.txt\n\n.ONESHELL:\n\ndefault:\n\t@cat ReadMe\n\nzddi:\n\t@rm -rf public/assets/*\n\t@./yarn run build\n\nwatch:\n\t@./yarn watch\n\nbuild-system:\n\t@./yarn --offline\n\nrebuild-system:\n\t@./yarn cache clean\n\t@rm -rf node_modules\n\t@rm -f yarn.lock\n\t@./yarn\n\ntar:\n\t@cd ${PUBLIC} ;\\\n\ttar jcf ${TARFILE} assets\n\nrmtar:\n\t@cd ${PUBLIC} ;\\\n\trm ${TARFILE}\n\ncommit: tar\n\t@-cd ${PUBLIC} ;\\\n\tSHASUM=$(shell shasum ${PUBLIC}/${TARFILE} | awk '{print $$1}') ;\\\n\techo $${SHASUM} > ${HASHFILE} ;\\\n\tgit add ${HASHFILE} ;\\\n\tgit commit -nm \"create checksum commit HASH: [$${SHASUM}]\" ;\n\nupload: commit\n\t@cd ${PUBLIC} ;\\\n\tSHASUM=$(shell shasum ${PUBLIC}/${TARFILE} | awk '{print $$1}') ;\\\n\tCOMMIT=$(shell git log -1 --pretty=format:%H) ;\\\n\tBRANCH=$(shell git rev-parse --abbrev-ref HEAD) ;\\\n\tcurl -X POST http://${HOST}/api/web_build/upload \\\n -F hash=$${SHASUM} \\\n -F user=$(shell git config --get user.name) \\\n -F commit=$${COMMIT} \\\n -F branch=$${BRANCH} \\\n -F assets=@./${TARFILE}\n\npush: zddi upload rmtar\n\ndownload:\n\t@cd ${PUBLIC} ;\\\n\tcurl http://${HOST}/api/web_build/$(shell cat ${PUBLIC}/${HASHFILE}) > ${TARFILE}\n\ninstall: download\n\t@rm -rf ${PUBLIC}/assets\n\t@cd ${PUBLIC} ;\\\n\ttar jxf ${TARFILE}\n\t@rm -rf ${INSTALL_DIR}\n\t@cp -r ${PUBLIC} /usr/local/\n\t@rm -rf ${PUBLIC}/assets\n\t@rm ${PUBLIC}/${TARFILE}\n\t@rm /usr/local/${PUBLIC}/${TARFILE}\n\t@echo -e \"Install public folder to ${GREEN}${INSTALL_DIR}${NC}\"\n\npull: download\n\t@rm -rf ${PUBLIC}/assets\n\t@cd ${PUBLIC} ;\\\n\ttar jxf ${TARFILE}\n\t@rm ${PUBLIC}/${TARFILE}\n\t@echo -e \"${GREEN}Code pull from remote done!${NC}\"\n\n\n```\n\n### 定义变量\n\nmakefile 中的变量定义和 shell 中一样，都可以直接使用\n\n```\nabc = 123\nbcd += ddd\ncc := f2\n```\n\n#### shel 中的变量\n\n由于 makefile 中的变量和 shell 格式一样，所以当要使用 shell 变量时，会需要使用转\n义序列来处理，方式是两个`$`符号\n\n### shell\n\nmakefile 中的 shell 使用需要注意，每一行都会启动一个 shell，单独运行当调用 shell\n进行插值的时候，shell 的执行顺序也不是顺序执行的\n\n由于都是使用单独的 shell，所以当想要使用相同的上下文时，可以使用`.ONESHELL`指令\n设置，或者是转义换行符\n\n### 连续的 task\n\n由于 makefile 中 shell 无法连续执行，所以，将 task 拆分成多个，然后通过 task 依\n赖关系顺序执行\n\ntask 依赖，在 task 后输入其它的 task 名称，就会按照顺序，连续执行这些 task\n\n当出现错误，task 队列会中断，这时需要在 shell 开始的行添加一个`-`来继续执行 task\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}