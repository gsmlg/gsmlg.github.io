{"pageProps":{"slug":"s2i","blog":{"id":32,"slug":"s2i","title":"Source to Image","date":"2019-08-15","author":"Gao","content":"## `Source to Image`\n\n`Source-to-Image` (`s2i`) 是由`openshift`提供的一套从自动从代码构建到镜像的工具\n和流程。\n\nS2I 提供了一套镜像模版来对多种语言和矿建进行构建\n\n### 应用\n\n`s2i` 适用于将已有程序迁移到 docker 镜像。 `s2i`提供了各类的 builder 镜像，可以\n针对不同的应用快速的完成构建。用户不再需要在为应用编写 Dockerfile，也不再需要在\n构建过程中运行安装依赖程序 `s2i`可以对构建镜像进行版本管理，向控制代码仓库一样控\n制 build 环境 `s2i`提供了可以持续流程，可以进行递增的项目编译，从而大大减少构建\n时间\n\n### 原理\n\n`s2i`提供了 builder 镜像，提供了完整的编译运行环境。 `s2i`会把代码注入到 builder\n镜像中。在 builder 镜像中对源码进行处理，使其可以被运行。\n\n处理脚本：\n\n- assemble 执行 build\n- run 运行\n- save-artifacts 保存构建供后续使用 optional\n- usage 显示使用信息 optional\n\n### 创建 Builder 镜像\n\n为`singlecloud`创建一个镜像\n\n#### 安装`s2i`命令\n\n```shell\ncurl -sSL https://github.com/zdnscloud/s2i/releases/download/v1.0/s2i.tar.gz | tar zxf - -C /usr/local/bin/ s2i\n```\n\n#### 创建`s2i builder`模版\n\n```shell\ns2i create s2i-singlecloud sc\n# 进入模版目录\ncd sc\n```\n\n模版中提供了两个命令来处理\n\n- make build 构建 builder 镜像\n- make test 测试 builder 镜像\n\n##### 修改 Dockerfile 文件\n\n```Dockerfile\n# s2i-singlecloud\nFROM golang:1.12.5-alpine3.9\n\n# TODO: Put the maintainer name in the image metadata\n# LABEL maintainer=\"Your Name <your@email.com>\"\nLABEL maintainer=\"GSMLG <me@gsmlg.org>\"\n\n# TODO: Rename the builder environment variable to inform users about application you provide them\nENV BUILDER_VERSION 1.0\n\n# TODO: Set labels used in OpenShift to describe the builder image\nLABEL io.k8s.description=\"Platform for building singlecloud\" \\\n      io.k8s.display-name=\"singlecloud builder\" \\\n      io.openshift.expose-services=\"80:http\" \\\n      io.openshift.s2i.scripts-url=image:///usr/libexec/s2i \\\n      io.openshift.tags=\"builder,go,node\"\n\nUSER root\n# TODO: Install required packages here:\nRUN mkdir -p /go/src/github.com/zdnscloud/singlecloud && apk upate && apk add bash && rm -rf /var/cache/apk/\n\nWORKDIR /go/src/github.com/zdnscloud/singlecloud\n\n# TODO: Copy the S2I scripts to /usr/libexec/s2i, since openshift/base-centos7 image\n# sets io.openshift.s2i.scripts-url label that way, or update that label\nCOPY ./s2i/bin /usr/libexec/s2i\n\n# This default user is created in the openshift/base-centos7 image\n#USER 1001\n\n# TODO: Set the default port for applications built using this image\nEXPOSE 80\n\n# TODO: Set the default CMD for the image\nCMD [\"/usr/libexec/s2i/usage\"]\n```\n\n##### 修改`s2i/bin/assemble`\n\n```bash\n#!/bin/bash -e\n#\n# S2I assemble script for the 's2i-singlecloud-builder' image.\n# The 'assemble' script builds your application source so that it is ready to run.\n#\n# For more information refer to the documentation:\n#   https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md\n#\n\n# If the 's2i-singlecloud' assemble script is executed with the '-h' flag, print the usage.\nif [[ \"$1\" == \"-h\" ]]; then\n    exec /usr/libexec/s2i/usage\nfi\n\n# Restore artifacts from the previous build (if they exist).\n#\nif [ \"$(ls /tmp/artifacts/ 2>/dev/null)\" ]; then\n  echo \"---> Restoring build artifacts...\"\n  mv /tmp/artifacts/. ./\nfi\n\necho \"---> Installing application source...\"\ncp -Rf /tmp/src/. ./\n\necho \"---> Building application from source...\"\n# TODO: Add build steps for your application, eg npm install, bundle install, pip install, etc.\ngo build cmd/singlecloud/singlecloud.go\nmv singlecloud /go/bin/\n```\n\n##### 修改`s2i/bin/run`\n\n```bash\n#!/bin/bash -e\n#\n# S2I run script for the 's2i-singlecloud-builder' image.\n# The run script executes the server that runs your application.\n#\n# For more information see the documentation:\n#   https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md\n#\n\nexec /go/bin/singlecloud\n```\n\n#### 创建 builder 镜像\n\n```bash\nmake build\n```\n\n#### Build `singlecloud`\n\n```bash\ns2i build https://github.com/zdnscloud/singlecloud s2i-singlecloud singlecloud\n```\n\n#### 运行`singlecloud`\n\n```bash\ndocker run -p 8080:80 --rm singlecloud singlecloud -listen :80\n```\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}