{"pageProps":{"slug":"socket-io","blog":{"author":"Gao","content":"### 简介\n\n`Socket.io`曾经是 websocket 持久连接的唯一选择，具有最好的浏览器兼容性。随着时间\n的推移，浏览器都已经支持 websocket 技术，这种持久连接库渐渐的淡出了。\n\n### 依赖模块\n\n```json\n\"debug\": \"~4.1.0\",\n\"engine.io\": \"~3.4.0\",\n\"has-binary2\": \"~1.0.2\",\n\"socket.io-adapter\": \"~1.1.0\",\n\"socket.io-client\": \"2.3.0\",\n\"socket.io-parser\": \"~3.4.0\"\n```\n\n#### 模块功能说明\n\n- engine.io Engine.IO 是 Socket.IO 实现基于传输的跨浏览器/跨设备双向通信层。\n\n- socket.io-adapter 用户管理用户和连接的默认适配器，如果启动 socket.io cluster，\n  可是使用 socket.io-redis\n\n- socket.io-client socket.io 客户端\n\n- socket.io-parser 用 JavaScript 编写的符合 socket.io-protocol 版本 4 的\n  socket.io 编码器和解码器。 由 socket.io 和 socket.io-client 使用。\n\n### 功能开发\n\n#### 使用接入认证\n\n实现方式是在建立连接的时候检查请求，可以同作配置功能来处理\n\n```js\nconst authorization = (request, cb) => {\n  console.log('==== athorization ====');\n  const {headers} = request;\n  const clientRequest = http\n    .get(\n      {\n        ...addr,\n        rejectUnauthorized: false,\n        headers: {\n          cookie: headers.cookie,\n        },\n      },\n      (res) => {\n        let buf = Buffer.from('');\n        res.on('data', (b) => {\n          buf = Buffer.concat([buf, b]);\n        });\n        res.on('end', (b) => {\n          const s = buf.toString('utf-8');\n          const d = JSON.parse(s);\n          if (d.role) {\n            cb(null, d.role);\n          } else {\n            cb(null);\n          }\n        });\n      },\n    )\n    .on('error', (e) => cb(e));\n};\n\nio.set('authorization', authorization);\n```\n\n同样也可以使用 io.use 来对请求做准入验证\n\n```js\nio.use((socket, next) => {\n  const {headers} = socket.request;\n  // do some check\n  checkHeaderInfo(headers)\n    .then(() => next())\n    .catch((e = new Error(e)));\n});\n```\n\n#### 连接复用与隔离\n\n当多个应用需要复用一条连接时，我们需要配置相关的隔离来处里对应的业务\n\nsocket.io 提供了两种方式做隔离\n\n1. namespace\n2. room\n\n##### namespace\n\n当前默认会有一个 namespace，默认的 namespace 调用位置为\n\n```js\nconst defaultNS = io.sockets || io.of('/');\n```\n\n每个 namespace 下都可以做单独的认证配置和创建自己的 room\n\nnamespace 可以在 client 控制\n\nclient 控制方式：\n\n```js\nconst socket = io('http://server.address', {path: 'socket'});\nconst nsSocket = socket.socket('/someNamespace');\n```\n\n##### room\n\n每个用户默认会加入一个名称为自己连接的 ID 的 room\n\n只能够在 server 加入 room，加入方式为:\n\n```js\nio.on('connection', (socket) => {\n  socket.join('soom room', (room) => {\n    console.log('join room success');\n  });\n});\n```\n\n### 官方文档\n\nSocket.io [地址](https://github.com/socketio/socket.io/blob/master/docs/API.md)\n\nSocket.io-client\n[地址](https://github.com/socketio/socket.io-client/blob/master/docs/API.md)\n","date":"2020-05-26","id":38,"slug":"socket-io","title":"SocketIO使用解析"}},"__N_SSG":true}