{"pageProps":{"slug":"web-component","blog":{"id":71,"slug":"web-component","title":"Web Component","date":"2022-04-07","author":"Gao","content":"## Concepts\n\nClass `CustomElementRegistry`\n\n* `define`\nThe define() method of the  [CustomElementRegistry](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry)  interface defines a new custom element.\nThere are two types of custom elements you can create:\n\t* Autonomous custom element: Standalone elements; they don’t inherit from built-in HTML elements.\n\t* Customized built-in element: These elements inherit from — and extend — built-in HTML elements.\n\n```\ncustomElements.define(name, constructor, options);\n```\n\n* `upgrade`\nThe upgrade() method of the  [CustomElementRegistry](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry)  interface upgrades all shadow-containing custom elements in a  [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)  subtree, even before they are connected to the main document.\n\n```\ncustomElements.upgrade(root);\n```\n\n* `whenDefined`\nThe whenDefined() method of the  [CustomElementRegistry](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry)  interface returns a  [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)  that resolves when the named element is defined.\n\n```\ncustomElements.whenDefined(name): Promise<CustomElementConstructor>;\n```\n\n## Example\n```javascript\n// Create a class for the element\nclass WordCount extends HTMLParagraphElement {\n  constructor() {\n    // Always call super first in constructor\n    super();\n\n    // count words in element's parent element\n    var wcParent = this.parentNode;\n\n    function countWords(node){\n      var text = node.innerText || node.textContent\n      return text.split(/\\s+/g).length;\n    }\n\n    var count = 'Words: ' + countWords(wcParent);\n\n    // Create a shadow root\n    var shadow = this.attachShadow({mode: 'open'});\n\n    // Create text node and add word count to it\n    var text = document.createElement('span');\n    text.textContent = count;\n\n    // Append it to the shadow root\n    shadow.appendChild(text);\n\n    // Update count when element content changes\n    setInterval(function() {\n      var count = 'Words: ' + countWords(wcParent);\n      text.textContent = count;\n    }, 200)\n\n  }\n}\n\n// Define the new element\ncustomElements.define('word-count', WordCount, { extends: 'p' });\n\n```\n\n\n## Real World Example\n\n```typescript\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { until } from 'lit/directives/until.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\n\nimport { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkGfm from 'remark-gfm';\nimport remarkRehype from 'remark-rehype';\nimport rehypeStringify from 'rehype-stringify';\nimport rehypeHighlight from 'rehype-highlight';\n\nimport mermaid from 'mermaid';\n\nimport github from './github.css';\nimport light from './atom-one-light.css';\nimport dark from './atom-one-dark.css';\n\n@customElement('remark-element')\nclass RemarkElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      flex-direction: column;\n    }\n    li > * {\n      display: inline;\n    }\n    li > ul {\n      display: block;\n    }\n    ${unsafeCSS(github)}\n    @media (prefers-color-scheme: dark) {\n      ${unsafeCSS(dark)}\n    }\n    @media (prefers-color-scheme: light) {\n      ${unsafeCSS(light)}\n    }\n  `;\n\n  @property({ type: Boolean, attribute: true, reflect: true })\n  debug: boolean = false;\n\n  private _content: string | undefined = undefined;\n  set content(val: string | undefined) {\n    const oldVal = this._content;\n    this._content = val;\n    this.requestUpdate('content', oldVal);\n  }\n  get content() {\n    return this._content;\n  }\n\n  private _mid: string;\n  private _fragement: string;\n\n  constructor() {\n    super();\n\n    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    mermaid.initialize({\n      startOnLoad: false,\n      theme: isDark ? 'dark' : 'default',\n    });\n    this._mid = this.id || `t${+new Date()}`;\n    this._fragement = '';\n  }\n\n  private _generate() {\n    const content = this.content ?? this.innerHTML;\n\n    return unified()\n      .use(remarkParse)\n      .use(remarkGfm)\n      .use(remarkRehype)\n      .use(rehypeHighlight, { ignoreMissing: true })\n      .use(rehypeStringify)\n      .process(content)\n      .then((vFile) => {\n        this._fragement = String(vFile);\n        return unsafeHTML(String(vFile));\n      });\n  }\n\n  private _do_updated() {\n    const els: NodeListOf<HTMLElement> = this.renderRoot.querySelectorAll(\n      'code.language-mermaid',\n    );\n    const fragement = document.createElement('div');\n    fragement.innerHTML = this._fragement;\n    const contentEls: NodeListOf<HTMLElement> = fragement.querySelectorAll(\n      'code.language-mermaid',\n    );\n\n    for (let i = 0, len = els.length; i < len; i += 1) {\n      const boxId = `mermaid-${this._mid}-${i}`;\n      let box = document.getElementById(boxId);\n      if (!box) {\n        box = document.createElement('div');\n        box.id = boxId;\n        document.body.append(box);\n        box.style.display = 'none';\n      }\n      const el = els[i];\n      const txt = contentEls[i].innerText;\n      if (this.debug) {\n        console.log(txt);\n      }\n      const cb = (svgGraph: string) => {\n        if (this.debug) {\n          console.log(svgGraph);\n        }\n        el.innerHTML = svgGraph;\n      };\n      const decodedTxt = this._decodeEntities(txt);\n      if (this.debug) {\n        console.log(decodedTxt);\n      }\n      mermaid.mermaidAPI.render(box.id, decodedTxt, cb);\n    }\n  }\n\n  override updated() {\n    setTimeout(() => this._do_updated(), 1000 / 60);\n  }\n\n  // override attributeChangedCallback(...args) {\n  //   if (this.debug) {\n  //     console.log(...args);\n  //   }\n  //   this.requestUpdate(...args);\n  // }\n\n  override render() {\n    const md = this._generate();\n\n    return html`${until(md)}`;\n  }\n\n  private _decodeEntities(txt: string): string {\n    return txt.replace(/&gt;/gi, '>').replace(/&lt;/gi, '<');\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'remark-element': RemarkElement;\n  }\n}\n```\n\n### Relative\n\n* Find more custom element see [Awesome Lit](https://github.com/web-padawan/awesome-lit)\n\n\n\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}