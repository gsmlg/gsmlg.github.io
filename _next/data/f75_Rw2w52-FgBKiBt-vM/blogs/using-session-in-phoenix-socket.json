{"pageProps":{"slug":"using-session-in-phoenix-socket","blog":{"id":73,"slug":"using-session-in-phoenix-socket","title":"使用Session认证Phoenix Socket","date":"2022-04-14","author":"Gao","content":"# 使用Session认证Phoenix Socket\n\n## Purpose\n由于在http页面中创建websocket连接, 需要每次都在页面上分配token, 之后还需要重新建立连接, 开发很麻烦, 所以考虑直接使用http中的session来进行认证\n\n## Inplement\n1. 启用socket中的session信息\n```elixir\n# file endpoint.ex\n  socket \"/socket\", GSMLGWeb.UserSocket,\n    websocket: [\n      connect_info: [\n        :peer_data,\n        :trace_context_headers,\n        :x_headers,\n        :uri,\n        {:session, @session_options}\n      ]\n    ]\n```\n\n2. 配置客户端连接时必须添加csrf_token\n```javascript\nconst csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\");\nconst params = { _csrf_token: csrfToken };\nif (token != null) {\n  params.token = token;\n}\nconst socket = new Socket(\"/socket\", { params });\n```\n\n3. 在认证中匹配\n```elixir\n# user_socket.ex\n  @impl true\n  def connect(%{\"_csrf_token\" => _csrf_token}, socket, connect_info) do\n    %{session: %{\"guardian_default_token\" => token}} = connect_info\n    claims_to_check = %{}\n    key = Guardian.Plug.default_key()\n\n    with {:ok, resource, claims} <-\n           Guardian.resource_from_token(GSMLGWeb.Guardian, token, claims_to_check, []) do\n      authed_socket = Guardian.Phoenix.Socket.assign_rtc(socket, resource, token, claims, key)\n\n      {:ok, authed_socket}\n    else\n      _ -> :error\n    end\n  end\n```\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}