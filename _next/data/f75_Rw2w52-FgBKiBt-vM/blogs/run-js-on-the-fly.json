{"pageProps":{"slug":"run-js-on-the-fly","blog":{"id":78,"slug":"run-js-on-the-fly","title":"Run your javascript code on the fly","date":"2022-10-01","author":"Gao","content":"## Summary\n\nIt has been eight years since es2015 modules were released.\nAfter so many years, with the advancement of technology, each operating environment can already support running es module directly.\n\nHere is the ways\n\n## Server side node.js\n\n`deno.land` support es modules since it's first release.\n\n`node.js` support es modules since `16 LTS`\n\nAdd `type: module` in `package.json`\n\n```json\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \"import\": \"./wrapper.mjs\",\n    \"require\": \"./index.cjs\"\n  }\n}\n```\n\n## In browser\n\nAll modern browsers already support es modules.\n\nJust add `type=module` on script tag.\n\n```html\n<script src=\"./index.js\" type=module></script>\n```\n\nUsing CDN to import script in browser.\n\n## `esm.sh`\n\n`esm.sh` transforms any npm modules automatically into ES Modules. \nSo you can try any npm module with the url like `https://esm.sh/<npm-module-name>` e.g. `https://esm.sh/react`. \nIt also serves type declaration through `X-TypeScript-Types` header. \nSo you can even type check the exported APIs when the CDN find types.\n\n`esm.sh` also provides the Node.js polyfill for Deno if the user agent is Deno.\n\nYou can load modules like React, React Router, styled-components, twind, etc.\n\n```ts\nimport React from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\nimport { BrowserRouter, Link, Route } from \"https://esm.sh/react-router\";\nimport styled from \"https://esm.sh/styled-components\";\nimport { tw } from \"https://esm.sh/twind\";\n```\n\n## Skypack\n\nSkypack is very similar to esm.sh. It automatically converts npm modules into ES Modules. \nIt provides types via `X-TypeScript-Types`. \nSo you can type check the exported APIs. \nSkypack also provides Node.js native API polyfills for Deno.\n\n```ts\nimport React from \"https://cdn.skypack.dev/react\";\nimport ReactDOM from \"https://cdn.skypack.dev/react-dom\";\nimport styled from \"https://cdn.skypack.dev/styled-components\";\nimport { tw } from \"https://cdn.skypack.dev/twind\";\n```\n\n## `unpkg.com`\n\n`unpkg.com` provides the npm modules as is. \nMany npm modules often provides [UMD (Universal Module Definition)](https://github.com/umdjs/umd) format of the module, \nor ES Module version of the module, like d3.js and threejs.\n\n## In Browsers alias\n\nThere is no standard for this yet, but [one is under way](https://wicg.github.io/import-maps/) (Github repo [here](https://github.com/WICG/import-maps).) With that proposal, \nyou'd have a script with `type=\"importmap\"` that listed the aliases, like this:\n```type=html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"react\": \"../vendors.react.js\",\n    \"react-dom\": \"https://some.cdn/react-dom.min.js\"\n  }\n}\n</script>\n```\n\nNote that relative paths are relative to the document in which this script appears, not the module where you use the alias.\n\nChrome trialed this starting in v74, it's behind a flag you have to enable: chrome://flags/#enable-experimental-productivity-features. \nThe Chrome platform status page for it lists \"no public signals\" from other vendors (so far).\n\n## At last\n\nBy the way, if you import from cdn, it will break the CSP rules purpose.\n\n\n\n\n\n\n\n\n\n\n\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}