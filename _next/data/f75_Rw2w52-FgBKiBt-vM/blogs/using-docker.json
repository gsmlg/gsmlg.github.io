{"pageProps":{"slug":"using-docker","blog":{"id":20,"slug":"using-docker","title":"使用Docker","date":"2018-07-27","author":"Gao","content":"# Using Docker\n\n## 什么是 Docker\n\nDocker 利用现有的 Linux 容器技术，以不同方式将其封装及扩展 --主要是通过提供可以\n值的镜像，以及一个用户友好的接口 --来创建一套完整的容器创建及发布方案\n\nDocker 平台拥有两个不同部分\n\n- 负责创建与运行容器的 Docker Engine\n- 用来发布容器的云服务 Docker Hub\n\nDocker 的哲学经常用航运集装箱的比喻来解释，这或许能解释 Docker 名字的由来。\n\n这个比喻大概是这样：\n\n    运输货物时，要用到不同的运输工具，可能包括货车、叉车、起重机、火车和轮船。\n    这意味着这些工具必须可以处理大小不一，运输需求各异的货物。\n    以往这是一道复杂的工序，需要付出大量的人力、物力。\n    联运集装箱的诞生为运输产业带来了一场革命。\n    集装箱的大小有了统一标准，并且设计的出发点是能以最少的人力在不同的运输方式之间搬运。\n    所有运输机械都为运送集装箱而设计。运输不同类型物品可以使用不同的集装箱。\n    因此运输产业只需要专注于处理集装箱的运输及存储问题，而集装箱内的物品完全由生产商负责。\n\n    Docker 的目的是把集装箱的标准化流程运用到IT行业中去。\n    如今的典型系统可能包括Javascript框架、NoSQL数据库、消息队列、REST API，\n    以及由各个不同编程语言所写的后端。\n    而这个组合的全部或部分可能需要运行到不同的环境中，从开发者的笔记本电脑， 到公司内的测试集群，再到云端的生产环境。\n    每个环境都存在差异，他们存在不同的操作系统和不同的程序库。我们需要付出巨大的人力来在不同环境之间移动这些应用。\n    Docker容器简化了应用程序的移动，好比集装箱一样。\n    开发人员只需专注开发，再也不用担心测试和发布时环境以及依赖关系带来的问题。\n    运维部门只需专注于运行容器的核心问题。\n\n## 安装 Docker\n\nDocker 需要运行于 64 位的 Linux 系统上，内核版本需要大于 3.10\n\nmacOS 可以从`docker.com`下载到 docker-ce 版本安装使用\n\n可以使用`homebrew`来安装\n\n```\nbrew cask install docker\n```\n\nUbuntu 系统安装\n\n```\nsudo apt-get remove docker docker-engine docker.io\napt-get update\n\napt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\napt-key fingerprint 0EBFCD88\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n\nadd-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\napt-get update\n\napt-get install docker-ce\n\n```\n\n## 运行 Docker\n\n### images 镜像\n\ndocker 镜像是一个构建好的 docker 环境，可以使用 docker 直接启动一个镜像\n\n```\ndocker run debian\n```\n\n运行镜像会自动从`docker hub`下载对应的镜像，并运行\n\n运行镜像会自动创建一个 container\n\n查看运行中的 container：\n\n```\ndocker ps\n```\n\n运行一个交互式镜像\n\n```\ndocker run --rm -it gsmlg/phoenix\n# -i interactive\n# -t terminal\n# --rm remove after run\n```\n\n当 docker 运行后会生成一个 container 可以通过\n\n```\ndocker ps -a\n```\n\n查看所有 docker containers\n\n删除无用的 container\n\n```\ndocker rm -v $(docker ps -aq -f status=exited)\n```\n\n### Docker 镜像构建与发布\n\n#### Dockerfile\n\ndocker 构建一个镜像需要通过 Dockerfile 文件来配置镜像的内容\n\n一个构建的 Dockerfile 内容：\n\n```\nFROM alpine\n\nMAINTAINER GSMLG < me@gsmlg.org >\n\nRUN apk update \\\n    && apk add curl \\\n    && apk add stunnel \\\n    && apk add squid \\\n    && rm -rf /var/cache/apk/*\n\nCOPY stunnel.conf pkey.pem cert.pem /etc/stunnel/\n\nEXPOSE 443\n\nCOPY entrypoint.sh /\n\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\nDockerfile 配置说明\n\n#### push and pull\n\n`push`: 将本地镜像推送到远程\n\n`pull`: 拉取远程镜像\n\n### 通过 Docker Compose 运行\n\ndocker compose 通过 yaml 指定 docker 启动配置参数\n\n#### Docker Registry\n\n```\nregistry:\n  restart: always\n  image: registry:2\n  ports:\n    - 127.0.0.1:5000:5000\n  volumes:\n    - ./data:/var/lib/registry\n\n```\n\n### Docker Machine\n\n运行本地或远程的 docker 主机\n\n自动创建管理移除\n"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}