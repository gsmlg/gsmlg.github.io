{"pageProps":{"slug":"prepare-for-eslints-new-config-system-flag-config","blog":{"author":"Gao","content":"## Background\n\nESLint has an old issue, that shareable config can not have it's own plugin, you have to use peerDependencies and let user install plugins themself. [Link](https://github.com/eslint/eslint/issues/3458)\n\nThis issue has been closed with a new design in this Augest. Here are the blogs explaining it.\n\n- https://eslint.org/blog/2022/08/new-config-system-part-1/\n- https://eslint.org/blog/2022/08/new-config-system-part-2/\n- https://eslint.org/blog/2022/08/new-config-system-part-3/\n\nSo it is time to prepare for new config system today.\n\n## About Flat Config\n\nThe new system is using the new flat config system to replace the old extends system to setup shared config.\n\n**What is Flat Config ?**\nJust using an array instead, and merge the array config.\n\nIt also has a lot of new design.\n* Use `node.js` native es module instead of old custom require system.\n* Remove `env`, use new `globals` package instead.\n\nOther changee are all benifits from the `flat config` system.\n* Each config can define an `ecmaVersion`.\n* Each config can define an `parser`\n* More powerful and configurable plugins\n* All old plugins works as well\n* Backward compatible\n\n## Try It\n\nThe new config system isnâ€™t yet tied into eslint yet. But since ESLint v8.21.0, it incorporates several ways to try out flat config.\n\n### Using flat config with the Linter class\n\n```js\nconst linter = new Linter({ configType: \"flat\" });\n\nconst messages = linter.verify(\"new Map()\", {\n    languageOptions: {\n        ecmaVersion: 5,\n        sourceType: \"script\"\n    },\n    rules: {\n        \"no-undef\": \"error\"\n    }\n}, \"filename.js\");\n```\n\n### Using flat config with the ESLint class\n\n```js\n// ESM\nimport pkg from \"eslint/use-at-your-own-risk\";\nconst { FlatESLint } = pkg;\n\n// CommonJS\nconst { FlatESLint } = require(\"eslint/use-at-your-own-risk\");\n```\n\n```js\nconst eslint = new FlatESLint({\n    cwd: originalDir,\n    overrideConfigFile: \"other.config.js\"\n});\nconst results = await eslint.lintText(\"foo\");\n\n```\n\n### Testing rules with flat config and the RuleTester class\n\n```js\n// ESM\nimport pkg from \"eslint/use-at-your-own-risk\";\nconst { FlatRuleTester } = pkg;\n\n// CommonJS\nconst { FlatRuleTester } = require(\"eslint/use-at-your-own-risk\");\n```\n\n```js\nconst ruleTester = new FlatRuleTester({\n    languageOptions: {\n        ecmaVersion: 5,\n        sourceType: \"script\"\n    }\n});\n\nruleTester.setDefaultConfig({\n    languageOptions: {\n        ecmaVersion: 5,\n        sourceType: \"script\"\n    }\n});\n```\n\n```js\nruleTester.run(\"my-rule\", rule, {\n    valid: [\n        {\n            code: \"var test = 'foo'\",\n            languageOptions: {\n                sourceType: \"script\"\n            }\n        },\n        {\n            code: \"var test2 = 'bar'\",\n            languageOptions: {\n                globals: { test: true }\n            }\n        }\n    ],\n    invalid: [\n        {\n            code: \"bar\",\n            languageOptions: {\n                sourceType: \"script\"\n            },\n            errors: 1\n        }\n    ]\n});\n```\n\n## Plan\n\nCreate a new branch for eslint new system and make a breaking change.\n\nA new Major version will be created.\n\nTry and play. ðŸ˜„\n\n\n\n\n\n\n\n\n\n ","date":"2022-11-28","id":83,"slug":"prepare-for-eslints-new-config-system-flag-config","title":"Prepare for ESLint's new config system, Flag Config"},"lightCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#383a42;background:#fafafa}.hljs-comment,.hljs-quote{color:#a0a1a7;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#a626a4}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e45649}.hljs-literal{color:#0184bb}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#50a14f}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#986801}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#4078f2}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#c18401}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}","darkCss":"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{color:#abb2bf;background:#282c34}.hljs-comment,.hljs-quote{color:#5c6370;font-style:italic}.hljs-doctag,.hljs-formula,.hljs-keyword{color:#c678dd}.hljs-deletion,.hljs-name,.hljs-section,.hljs-selector-tag,.hljs-subst{color:#e06c75}.hljs-literal{color:#56b6c2}.hljs-addition,.hljs-attribute,.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#98c379}.hljs-attr,.hljs-number,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-pseudo,.hljs-template-variable,.hljs-type,.hljs-variable{color:#d19a66}.hljs-bullet,.hljs-link,.hljs-meta,.hljs-selector-id,.hljs-symbol,.hljs-title{color:#61aeee}.hljs-built_in,.hljs-class .hljs-title,.hljs-title.class_{color:#e6c07b}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.hljs-link{text-decoration:underline}"},"__N_SSG":true}