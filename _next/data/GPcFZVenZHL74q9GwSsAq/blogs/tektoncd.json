{"pageProps":{"slug":"tektoncd","blog":{"id":29,"name":"tektoncd","title":"Tekton Pipelines","date":"2020-01-04","author":"Gao","content":"# Tekton Pipelines\n\n## Intro\n\nTekton Pipelines 是一个为`Kubernetes`应用程序配置和运行`CI / CD`风格的`Pipelined`的开源实现\n\n`Pipeline` 创建 `Custom Resources` 作为构建模块来声明`pipelines`\n\nTekton Pipelines 是云原生的\n\n- 运行于`Kubernetes`\n- 将`Kubernetes`集群作为一级资源类型\n- 使用容器作为构建块\n\nTekton Pipelines 是解耦的\n\n- Pipeline 可以被部署于任意 k8s 集群\n- 组成`pipeline`的`task`可以分开独立运行\n- 向 Git repos 之类的资源可以轻松的在运行之间交换\n\nTekton Pipelines are Typed\n\n- 类型化的资源意味着对于诸如 Image 之类的资源，可以轻松地将资源输出\n\n### 此设计的高级细节：\n\n- Pipeline 运行管道，可以实现一个流程，可以由事件出发，也可以通过`PipelineRun`来运行\n- Task 基本运行单元，可以通过`TaskRun`来运行\n- PipelineResource `Task`的输入和输出资源\n\n## 各类资源介绍\n\n### PipelineResources\n\n`PipelineResource` 是 `Pipline` 中 `Task` 的输入和输出对象\n\nSyntax:\n\nTo define a configuration file for a PipelineResource, you can specify the following fields:\n\n- Required:\n  - apiVersion - Specifies the API version, for example tekton.dev/v1alpha1.\n  - kind - Specify the PipelineResource resource object.\n  - metadata - Specifies data to uniquely identify the PipelineResource object, for example a name.\n  - spec - Specifies the configuration information for your PipelineResource resource object.\n  - type - Specifies the type of the PipelineResource\n- Optional:\n  - params - Parameters which are specific to each type of PipelineResource\n\nTypes:\n\n- Git\n- PullRequest\n- Image\n- Cluster\n- Storage\n- CloutEvent\n\n### Tasks\n\nTask(or ClusterTask) 是 CI 中一个组顺序执行的 step 的集合，是基本任务单位。Task 会在 pod 中运行。\n\nTask 需要声明三部分：\n\n- inputs\n- outputs\n- steps\n\nTask 在 namespace 中可用，ClusterTask 在整个集群可用\n\nSyntax:\n\nTo define a configuration file for a Task resource, you can specify the following fields:\n\n- Required:\n  - apiVersion - Specifies the API version, for example tekton.dev/v1alpha1.\n  - kind - Specify the Task resource object.\n  - metadata - Specifies data to uniquely identify the Task resource object, for example a name.\n  - spec - Specifies the configuration information for your Task resource object. Task steps must be defined through either of the following fields:\n    -steps - Specifies one or more container images that you want to run in your Task.\n- Optional:\n  - inputs - Specifies parameters and PipelineResources needed by your Task\n  - outputs - Specifies PipelineResources created by your Task\n  - volumes - Specifies one or more volumes that you want to make available to your Task's steps.\n  - stepTemplate - Specifies a Container step definition to use as the basis for all steps within your Task.\n  - sidecars - Specifies sidecar containers to run alongside steps.\n\n### Piplines\n\nPipline 定义并执行一组 Task\n\nSyntax:\n\nTo define a configuration file for a Pipeline resource, you can specify the following fields:\n\n- Required:\n  - apiVersion - Specifies the API version, for example tekton.dev/v1alpha1.\n  - kind - Specify the Pipeline resource object.\n  - metadata - Specifies data to uniquely identify the Pipeline resource object, for example a name.\n  - spec - Specifies the configuration information for your Pipeline resource object. In order for a Pipeline to do anything, the spec must include:\n    - tasks - Specifies which Tasks to run and how to run them\n- Optional:\n  - resources - Specifies which PipelineResources of which types the Pipeline will be using in its Tasks\n  - tasks\n    - resources.inputs / resource.outputs\n      - from - Used when the content of the PipelineResource should come from the output of a previous Pipeline Task\n      - runAfter - Used when the Pipeline Task should be executed after another Pipeline Task, but there is no output linking required\n      - retries - Used when the task is wanted to be executed if it fails. Could be a network error or a missing dependency. It does not apply to cancellations.\n      - conditions - Used when a task is to be executed only if the specified conditions are evaluated to be true.\n\nTask 执行顺序，所有 Task 默认都会并行执行，除非指定了\n\n- from\n- runAfter\n  两项会指定 task 执行的依赖关系\n\nFor example see this Pipeline spec:\n\n```yaml\n- name: lint-repo\n  taskRef:\n    name: pylint\n  resources:\n    inputs:\n      - name: workspace\n        resource: my-repo\n- name: test-app\n  taskRef:\n    name: make-test\n  resources:\n    inputs:\n      - name: workspace\n        resource: my-repo\n- name: build-app\n  taskRef:\n    name: kaniko-build-app\n  runAfter:\n    - test-app\n  resources:\n    inputs:\n      - name: workspace\n        resource: my-repo\n    outputs:\n      - name: image\n        resource: my-app-image\n- name: build-frontend\n  taskRef:\n    name: kaniko-build-frontend\n  runAfter:\n    - test-app\n  resources:\n    inputs:\n      - name: workspace\n        resource: my-repo\n    outputs:\n      - name: image\n        resource: my-frontend-image\n- name: deploy-all\n  taskRef:\n    name: deploy-kubectl\n  resources:\n    inputs:\n      - name: my-app-image\n        resource: my-app-image\n        from:\n          - build-app\n      - name: my-frontend-image\n        resource: my-frontend-image\n        from:\n          - build-frontend\n```\n\nThis will result in the following execution graph:\n\n```none\n        |            |\n        v            v\n     test-app    lint-repo\n    /        \\\n   v          v\nbuild-app  build-frontend\n   \\          /\n    v        v\n    deploy-all\n```\n\n## 安装\n\n运行 kubectl 安装指定的 yaml 文件\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/gsmlg/pipeline/master/updated.yaml\n```\n\n检查所有 pod 都处于`running`状态时，安装完成\n\n```shell\nkubectl -n tekton-pipelines get pods\n```\n\n安装 dashboard，更方便的查看 pipeline\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/gsmlg/pipeline/master/updated_dashboard.yaml\n```\n\n## 演示运行一个`singlecloud`的构建过程\n\n创建账户\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pipeline-run-role\nrules:\n  - apiGroups:\n      - extensions\n    resources:\n      - deployments\n    verbs:\n      - get\n      - list\n      - watch\n      - create\n      - update\n      - patch\n      - delete\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: pipeline-run-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: pipeline-run-role\nsubjects:\n  - kind: ServiceAccount\n    name: pipeline-run-service\n    namespace: default\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: pipeline-run-service\n  namespace: default\nsecrets:\n  - name: regcred\n\n---\napiVersion: v1\ndata:\n  .dockerconfigjson: <encoded docker registry auth data>\nkind: Secret\nmetadata:\n  name: regcred\n  namespace: default\ntype: kubernetes.io/dockerconfigjson\n```\n\n定义资源\n\n```yaml\napiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: zcloud-image\nspec:\n  type: image\n  params:\n    - name: url\n      value: docker.io/gsmlg/zcloud\n```\n\n创建 task\n\n```yaml\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: build-image-from-git\nspec:\n  inputs:\n    resources:\n      - name: docker-source\n        type: git\n    params:\n      - name: pathToDockerFile\n        type: string\n        description: The path to the dockerfile to build\n        default: /workspace/docker-source/Dockerfile\n      - name: pathToContext\n        type: string\n        description: The build context used by Kaniko\n          (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)\n        default: /workspace/docker-source\n  outputs:\n    resources:\n      - name: builtImage\n        type: image\n  steps:\n    - name: build-and-push\n      image: registry.zdns.cn/gsmlg/kaniko-project-executor:v0.13.0\n      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential\n      env:\n        - name: 'DOCKER_CONFIG'\n          value: '/builder/home/.docker/'\n      command:\n        - /kaniko/executor\n      args:\n        - --dockerfile=$(inputs.params.pathToDockerFile)\n        - --destination=$(outputs.resources.builtImage.url)\n        - --context=$(inputs.params.pathToContext)\n        - --oci-layout-path=/builder/home/image-outputs/builtImage\n        - --skip-tls-verify\n\n---\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: build-zcloud\nspec:\n  inputs:\n    resources:\n      - name: docker-source\n        type: git\n      - name: image\n        type: image\n      - name: uiImage\n        type: image\n    params:\n      - name: pathToDockerFile\n        type: string\n        description: The path to the dockerfile to build\n        default: /workspace/docker-source/Dockerfile\n      - name: pathToContext\n        type: string\n        description: The build context used by Kaniko\n          (https://github.com/GoogleContainerTools/kaniko#kaniko-build-contexts)\n        default: /workspace/docker-source\n  outputs:\n    resources:\n      - name: builtImage\n        type: image\n  steps:\n    - name: setup-dockerfile\n      image: docker.io/ubuntu:18.04\n      command:\n        - /workspace/docker-source/setup.sh\n      args:\n        - $(inputs.resources.image.url)\n        - $(inputs.resources.uiImage.url)\n        - /workspace/docker-source/Dockerfile\n    - name: build-and-push\n      image: registry.zdns.cn/gsmlg/kaniko-project-executor:v0.13.0\n      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential\n      env:\n        - name: 'DOCKER_CONFIG'\n          value: '/builder/home/.docker/'\n      command:\n        - /kaniko/executor\n      args:\n        - --dockerfile=$(inputs.params.pathToDockerFile)\n        - --destination=$(outputs.resources.builtImage.url)\n        - --context=$(inputs.params.pathToContext)\n        - --oci-layout-path=/builder/home/image-outputs/builtImage\n        - --skip-tls-verify\n\n---\napiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: zcloud-build-pipeline\nspec:\n  resources:\n    - name: singlecloud-repo\n      type: git\n    - name: singlecloud-ui-repo\n      type: git\n    - name: zcloud-repo\n      type: git\n    - name: singlecloud-image\n      type: image\n    - name: singlecloud-ui-image\n      type: image\n    - name: zcloud-image\n      type: image\n  tasks:\n    - name: build-singlecloud-ui\n      retries: 1\n      taskRef:\n        name: build-image-from-git\n      resources:\n        inputs:\n          - name: docker-source\n            resource: singlecloud-ui-repo\n        outputs:\n          - name: builtImage\n            resource: singlecloud-ui-image\n    - name: build-singlecloud\n      taskRef:\n        name: build-image-from-git\n      resources:\n        inputs:\n          - name: docker-source\n            resource: singlecloud-repo\n        outputs:\n          - name: builtImage\n            resource: singlecloud-image\n    - name: build-zcloud\n      taskRef:\n        name: build-zcloud\n      resources:\n        inputs:\n          - name: docker-source\n            resource: zcloud-repo\n          - name: uiImage\n            resource: singlecloud-ui-image\n            from:\n              - build-singlecloud-ui\n          - name: image\n            resource: singlecloud-image\n            from:\n              - build-singlecloud\n        outputs:\n          - name: builtImage\n            resource: zcloud-image\n```\n\n运行 pipelinue:\n\n```yaml\napiVersion: tekton.dev/v1alpha1\nkind: PipelineRun\nmetadata:\n  generateName: zcloud-build-run-\nspec:\n  pipelineRef:\n    name: zcloud-build-pipeline\n  serviceAccount: pipeline-run-service\n  resources:\n    - name: singlecloud-repo\n      resourceSpec:\n        type: git\n        params:\n          - name: revision\n            value: master\n          - name: url\n            value: https://github.com/zdnscloud/singlecloud\n    - name: singlecloud-ui-repo\n      resourceSpec:\n        type: git\n        params:\n          - name: revision\n            value: master\n          - name: url\n            value: https://github.com/zdnscloud/singlecloud-ui\n    - name: zcloud-repo\n      resourceSpec:\n        type: git\n        params:\n          - name: revision\n            value: master\n          - name: url\n            value: https://github.com/gsmlg/zcloud-image\n    - name: singlecloud-image\n      resourceSpec:\n        type: image\n        params:\n          - name: url\n            value: registry.zdns.cn/zcloud/singlecloud:master\n    - name: singlecloud-ui-image\n      resourceSpec:\n        type: image\n        params:\n          - name: url\n            value: registry.zdns.cn/zcloud/singlecloud-ui:master\n    - name: zcloud-image\n      resourceRef:\n        name: zcloud-image\n```\n"}},"__N_SSG":true}