(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"32b0bd2b4bd1de497d59":function(s,e){s.exports='<h1 id=\u6982\u8ff0>\u6982\u8ff0</h1> <p>\u65e0\u754c\u9762\u6d4f\u89c8\u5668 &lt;<code>headdless mode</code>&gt; \u5728\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u548c\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u65f6\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u53ef\u80fd\u9700\u8981\u8fd0\u884c\u6d4f\u89c8\u5668\u53bb\u6267\u884c\u4e00\u4e9b\u7279\u6b8a\u7684\u4efb\u52a1\uff0c\u4f46\u662f\u670d\u52a1\u5668\u4e0a\u662f\u6ca1\u6709X Window\u7cfb\u7edf\uff0c\u8fd9\u4e2a\u65f6\u5019 \u5c31\u9700\u8981\u4f7f\u7528\u65e0\u754c\u9762\u6d4f\u89c8\u5668\u4e86\u3002</p> <p>\u65e0\u754c\u9762\u6d4f\u89c8\u5668\u53ef\u4ee5\u53bb\u6253\u5f00\u4e00\u4e9b\u771f\u6b63\u7684\u9875\u9762\uff0c\u5e76\u4e14\u6e32\u67d3\uff0c\u7136\u540e\u8f93\u51fa\u5230html\uff0cpdf\u6216\u56fe\u7247\u3002</p> <p>\u65e0\u754c\u9762\u6d4f\u89c8\u5668\u8fd8\u53ef\u4ee5\u6253\u5f00\u8c03\u8bd5\u7aef\u53e3\uff0c\u5728\u6ca1\u6709\u56fe\u5f62\u754c\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u8bd5\u771f\u6b63\u7684\u6d4f\u89c8\u5668\u9875\u9762\u3002</p> <h2 id=chrome>Chrome</h2> <p>Chrome \u4ece\u7248\u672c59\u5f00\u59cb\uff0c\u63d0\u4f9b\u4e86\u65e0\u754c\u9762\u6d4f\u89c8\u529f\u80fd\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b:</p> <pre class=hljs><code class=language-shell>chrome \\\n  --headless \\                   # Runs Chrome in headless mode.\n  --disable-gpu \\                # Temporarily needed for now.\n  --remote-debugging-port=9222 \\\n  https://www.chromestatus.com   # URL to open. Defaults to about:blank.</code></pre><ul> <li>chrome\u547d\u4ee4\u8bbe\u7f6e\uff1a</li> </ul> <pre class=hljs><code class=language-shell>alias chrome="/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"\nalias chrome-canary="/Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary"\nalias chromium="/Applications/Chromium.app/Contents/MacOS/Chromium"</code></pre><p>Chrome headless mode \u63d0\u4f9b\u4e86\u5f88\u591a\u5f3a\u5927\u529f\u80fd\uff1a</p> <ul> <li><p>\u8f93\u51faDOM\u7ed3\u6784</p> <p><code>--dump-dom</code> flag\u4f1a\u8f93\u51fa<code>document.body.innerHTML</code></p> </li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --dump-dom https://www.chromestatus.com/</code></pre><ul> <li>\u8f93\u51faPDF</li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --print-to-pdf https://www.chromestatus.com/</code></pre><ul> <li>\u8f93\u51fa\u622a\u56fe</li> </ul> <pre class=hljs><code class=language-shell>chrome --headless --disable-gpu --screenshot https://www.chromestatus.com/\n<span class=hljs-meta>\n#</span><span class=bash> Size of a standard letterhead.</span>\nchrome --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/\n<span class=hljs-meta>\n#</span><span class=bash> Nexus 5x</span>\nchrome --headless --disable-gpu --screenshot --window-size=412,732 https://www.chromestatus.com/</code></pre><ul> <li><p>REPL</p> <p><code>--repl</code> \u4f1a\u6253\u5f00\u4e00\u4e2aJS Console</p> </li> </ul> <pre class=hljs><code class=language-shell><span class=hljs-meta>$</span><span class=bash> chrome --headless --<span class=hljs-built_in>disable</span>-gpu --repl https://www.chromestatus.com/</span>\n[0608/112805.245285:INFO:headless_shell.cc(278)] Type a Javascript expression to evaluate or "quit" to exit.\n<span class=hljs-meta>&gt;</span><span class=bash>&gt;&gt; location.href</span>\n{"result":{"type":"string","value":"https://www.chromestatus.com/features"}}\n<span class=hljs-meta>&gt;</span><span class=bash>&gt;&gt; quit</span>\n<span class=hljs-meta>$</span></code></pre><ul> <li><p>\u8fdc\u7a0b\u8c03\u8bd5</p> <p><code>--remote-debugging-port=9222</code> \u4f1a\u6253\u5f00\u8c03\u8bd5\u7aef\u53e3\uff0c\u8c03\u8bd5\u57fa\u4e8e<code>DevTools protocol</code>\u534f\u8bae \u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u5668\u8fde\u63a5\uff0c\u6765\u8fdb\u884c\u8fdc\u7a0b\u8c03\u8bd5\u3002</p> </li> </ul> <h3 id=node-\u7f16\u7a0b\u63a5\u53e3>Node \u7f16\u7a0b\u63a5\u53e3</h3> <p><strong>The Puppeteer API</strong></p> <p>Puppeteer is a Node library developed by the Chrome team. It provides a high-level API to control headless (or full) Chrome. It&#39;s similar to other automated testing libraries like Phantom and NightmareJS, but it only works with the latest versions of Chrome.</p> <p>Among other things, Puppeteer can be used to easily take screenshots, create PDFs, navigate pages, and fetch information about those pages. I recommend the library if you want to quickly automate browser testing. It hides away the complexities of the DevTools protocol and takes care of redundant tasks like launching a debug instance of Chrome.</p> <p>Install it:</p> <pre class=hljs><code class=language-shell>yarn add puppeteer</code></pre><p>Example - print the user agent</p> <pre class=hljs><code class=language-js><span class=hljs-keyword>const</span> puppeteer = <span class=hljs-built_in>require</span>(<span class=hljs-string>\'puppeteer\'</span>);\n\n<span class=hljs-function>(<span class=hljs-params><span class=hljs-keyword>async</span>(</span>) =&gt;</span> {\n  <span class=hljs-keyword>const</span> browser = <span class=hljs-keyword>await</span> puppeteer.launch();\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>await</span> browser.version());\n  browser.close();\n})();</code></pre><p>Example - taking a screenshot of the page</p> <pre class=hljs><code class=language-js><span class=hljs-keyword>const</span> puppeteer = <span class=hljs-built_in>require</span>(<span class=hljs-string>\'puppeteer\'</span>);\n\n<span class=hljs-function>(<span class=hljs-params><span class=hljs-keyword>async</span>(</span>) =&gt;</span> {\n\n<span class=hljs-keyword>const</span> browser = <span class=hljs-keyword>await</span> puppeteer.launch();\n<span class=hljs-keyword>const</span> page = <span class=hljs-keyword>await</span> browser.newPage();\n<span class=hljs-keyword>await</span> page.goto(<span class=hljs-string>\'https://www.chromestatus.com\'</span>, {<span class=hljs-attr>waitUntil</span>: <span class=hljs-string>\'networkidle\'</span>});\n<span class=hljs-keyword>await</span> page.pdf({<span class=hljs-attr>path</span>: <span class=hljs-string>\'page.pdf\'</span>, <span class=hljs-attr>format</span>: <span class=hljs-string>\'A4\'</span>});\n\nbrowser.close();\n})();</code></pre><p>Check out <a href=https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md>Puppeteer&#39;s documentation</a> to learn more about the full API.</p> <h2 id=firefox>Firefox</h2> <p>Headless Firefox works on Fx55+ on Linux, and 56+ on Windows/Mac.</p> <p>\u4eceFirefox 57\u5f00\u59cb\uff0cFirefox\u5f00\u59cb\u652f\u6301\u622a\u56fe</p> <pre class=hljs><code class=language-><span class=hljs-regexp>/path/</span>to<span class=hljs-regexp>/firefox -headless -screenshot https:/</span><span class=hljs-regexp>/developer.mozilla.com</span></code></pre><ul> <li><code>-screenshot</code> name url \u2014 Set a custom name for the screenshot by including it between the -screenshot flag and the URL you want to capture. Note that you can specify other web-compatible image formats such as .jpg, .bmp, etc.</li> <li><code>--window-size=x</code> \u2014 Set a custom viewport width when taking the screenshot (full height is maintained). Note that the single argument version of this doesn&#39;t work.</li> <li><code>--window-size=x,y</code> \u2014 Set a custom viewport width and height to capture.</li> </ul> <p>Firefox headless \u6a21\u5f0f\u53ef\u4ee5\u7528\u4e8e\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u57fa\u4e8e<code>Selenium</code>\u3002</p> <p>MDN\u7684<a href=https://github.com/mdn/headless-examples><code>headless-example</code></a></p> '}}]);