(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{"./app/data/blogs/es6-const-let.md":function(s,n){s.exports="<h2 id=es6-const-let>es6 中新增加了 <code>const</code> 和 <code>let</code></h2> <p> <code>const</code> 和 <code>let</code> 都是新增加的变量声名方式</p> <h3 id=-var-hoisting->有别于<code>var</code>声名,他们没有变量提升(Hoisting)机制</h3> <pre class=hljs><code class=language-javascript><span class=hljs-keyword>if</span> (!(<span class=hljs-string>'someone'</span> <span class=hljs-keyword>in</span> <span class=hljs-built_in>window</span>)) {\n  <span class=hljs-keyword>var</span> someone = <span class=hljs-string>'Joe'</span>;\n} <span class=hljs-keyword>else</span> {\n  someone = <span class=hljs-string>'reload'</span>\n}\n\n<span class=hljs-built_in>console</span>.log(someone); \n</code></pre><p>总是会打印出 &#39;reload&#39;</p> <p>在预编译阶段会变成</p> <pre class=hljs><code class=language-javascript><span class=hljs-keyword>var</span> someone;\n\n<span class=hljs-keyword>if</span> (!(<span class=hljs-string>'someone'</span> <span class=hljs-keyword>in</span> <span class=hljs-built_in>window</span>)) {\n  someone = <span class=hljs-string>'Joe'</span>;\n} <span class=hljs-keyword>else</span> {\n  someone = <span class=hljs-string>'reload'</span>\n}\n\n<span class=hljs-built_in>console</span>.log(someone); \n</code></pre><h3 id=->禁止重声名</h3> <p><code>let</code> 会禁止重新声名变量</p> <h3 id=const>const</h3> <p><code>const</code> 声名时必须赋值</p> <h3 id=->临时性死区</h3> <p>使用<code>cosnt</code>或者<code>let</code>声名变量，如果在之前调用他们，会抛出一个异常<code>ReferenceError</code></p> <p>这时使用 <code>typeof</code> 操作时也是不安全的，这里成为临时性死区 (Temporal Dead Zone)</p> "}}]);