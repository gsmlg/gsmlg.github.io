(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{"./app/data/blogs/makefile.md":function(s,n){s.exports='<h2 id=-make>为什么使用make</h2> <p>在项目中部署使用了makefile配置,来方便快速的执行一些工作流</p> <p>相比于其它task runner，make的优势是不需要安装，所有系统当前都已经预置</p> <p>方便，是最大的原因</p> <p>目前使用的makefile如下：</p> <pre class=hljs><code class=language-makefile>GREEN=\\033[0;32m\nNC=\\033[0m\nINSTALL_DIR=/usr/local/public\nPUBLIC=./public\nHOST=10.1.101.60\nTARFILE=assets.tar.bz2\nHASHFILE=assets.hash.txt\n\n<span class=hljs-section>.ONESHELL:</span>\n\n<span class=hljs-section>default:</span>\n    @cat ReadMe\n\n<span class=hljs-section>zddi:</span>\n    @rm -rf public/assets/*\n    @./yarn run build\n\n<span class=hljs-section>watch:</span>\n    @./yarn watch\n\n<span class=hljs-section>build-system:</span>\n    @./yarn --offline\n\n<span class=hljs-section>rebuild-system:</span>\n    @./yarn cache clean\n    @rm -rf node_modules\n    @rm -f yarn.lock\n    @./yarn\n\n<span class=hljs-section>tar:</span>\n    @cd ${PUBLIC} ;\\\n    tar jcf ${TARFILE} assets\n\n<span class=hljs-section>rmtar:</span>\n    @cd ${PUBLIC} ;\\\n    rm ${TARFILE}\n\n<span class=hljs-section>commit: tar</span>\n    @-cd ${PUBLIC} ;\\\n    SHASUM=<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> shasum ${PUBLIC}/${TARFILE} | awk \'{print $$1}\')</span> ;\\\n    echo $${SHASUM} &gt; ${HASHFILE} ;\\\n    git add ${HASHFILE} ;\\\n    git commit -nm <span class=hljs-string>"create checksum commit HASH: [$${SHASUM}]"</span> ;\n\n<span class=hljs-section>upload: commit</span>\n    @cd ${PUBLIC} ;\\\n    SHASUM=<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> shasum ${PUBLIC}/${TARFILE} | awk \'{print $$1}\')</span> ;\\\n    COMMIT=<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> git log -1 --pretty=format:%H)</span> ;\\\n    BRANCH=<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> git rev-parse --abbrev-ref HEAD)</span> ;\\\n    curl -X POST http://${HOST}/api/web_build/upload \\\n -F hash=$${SHASUM} \\\n -F user=<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> git config --get user.name)</span> \\\n -F commit=$${COMMIT} \\\n -F branch=$${BRANCH} \\\n -F assets=@./${TARFILE}\n\n<span class=hljs-section>push: zddi upload rmtar</span>\n\n<span class=hljs-section>download:</span>\n    @cd ${PUBLIC} ;\\\n    curl http://${HOST}/api/web_build/<span class=hljs-variable>$(<span class=hljs-built_in>shell</span> cat ${PUBLIC}/${HASHFILE})</span> &gt; ${TARFILE}\n\n<span class=hljs-section>install: download</span>\n    @rm -rf ${PUBLIC}/assets\n    @cd ${PUBLIC} ;\\\n    tar jxf ${TARFILE}\n    @rm -rf ${INSTALL_DIR}\n    @cp -r ${PUBLIC} /usr/local/\n    @rm -rf ${PUBLIC}/assets\n    @rm ${PUBLIC}/${TARFILE}\n    @rm /usr/local/${PUBLIC}/${TARFILE}\n    @echo -e <span class=hljs-string>"Install public folder to ${GREEN}${INSTALL_DIR}${NC}"</span>\n\n<span class=hljs-section>pull: download</span>\n    @rm -rf ${PUBLIC}/assets\n    @cd ${PUBLIC} ;\\\n    tar jxf ${TARFILE}\n    @rm ${PUBLIC}/${TARFILE}\n    @echo -e <span class=hljs-string>"${GREEN}Code pull from remote done!${NC}"</span>\n\n</code></pre><h3 id=->定义变量</h3> <p>makefile 中的变量定义和shell中一样，都可以直接使用</p> <pre class=hljs><code class="language-undefined">abc = 123\nbcd += ddd\ncc := f2</code></pre><h4 id=shel->shel中的变量</h4> <p>由于makefile中的变量和shell格式一样，所以当要使用shell变量时， 会需要使用转义序列来处理，方式是两个<code>$</code>符号</p> <h3 id=shell>shell</h3> <p>makefile 中的shell使用需要注意，每一行都会启动一个shell，单独运行 当调用shell进行插值的时候，shell的执行顺序也不是顺序执行的</p> <p>由于都是使用单独的shell，所以当想要使用相同的上下文时， 可以使用<code>.ONESHELL</code>指令设置，或者是转义换行符</p> <h3 id=-task>连续的task</h3> <p>由于makefile中shell无法连续执行，所以，将task拆分成多个，然后通过task依赖关系顺序执行</p> <p>task依赖，在task后输入其它的task名称，就会按照顺序，连续执行这些task</p> <p>当出现错误，task队列会中断，这时需要在shell开始的行添加一个<code>-</code>来继续执行task</p> '}}]);