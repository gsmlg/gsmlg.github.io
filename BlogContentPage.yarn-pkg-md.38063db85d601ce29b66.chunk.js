(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"./app/data/blogs/yarn-pkg.md":function(p,a){p.exports="<h2 id=npm->npm的问题</h2> <p>npm 安装包的版本控制可伸缩性的特性带来的依赖不确定性 导致经常出现问题</p> <h2 id=->解决方案</h2> <h3 id=-git->使用git管理的问题</h3> <p>每次变更支持库都要涉及数千个文件的修改 需要git追踪大量依赖文件</p> <p>Facebook面对同样的问题： <a href=https://code.facebook.com/posts/1840075619545360>https://code.facebook.com/posts/1840075619545360</a></p> <h2 id=yarn>Yarn</h2> <p>Yarn包管理器是由Facebook，Exponent，Google 以及 Tilde 合作提供的开源包管理器</p> <p>Yarn是具有革命性的包管理工具，继承自npm，包含了npm的所有功能</p> <ul> <li><p>极速 Yarn 缓存它下载的每个包，所以无需重复下载。它还并行化操作以最大化资源利用，所以安装时间比以往快。</p> </li> <li><p>超级安全。 Yarn 在每个安装包的代码执行前使用校验码验证包的完整性。</p> </li> <li><p>超级可靠。 Yarn 使用一个格式详尽但简洁的 lockfile 和一个精确的算法来安装，能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上。</p> </li> </ul> <h3 id=->实现原理：</h3> <p>使用yarn.lock 来控制包版本，确定一致 yarn.lock 记录文件签名，以及URL，确定访问</p> <h3 id=npm->npm指令对应</h3> <p>yarn add [package] == npm install —save [package]</p> <p>yarn remove [package] == npm uninstall —save [package]</p> <p>yarn global add [package] == npm install -g [package]</p> <p>yarn global remove [package] == npm uninstall -g [package]</p> "}}]);