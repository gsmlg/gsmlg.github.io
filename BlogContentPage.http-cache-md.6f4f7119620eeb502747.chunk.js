(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{"./app/data/blogs/http-cache.md":function(s,a){s.exports='<h1 id=http->HTTP 缓存控制</h1> <p>HTTP协议是WWW的通讯协议，用于处理互联网上成百上千的应用请求</p> <p>HTTP中的缓存是非常重要的，线上服务可以处理成千上万的请求，很大程度上，都依赖缓存</p> <p>HTTP协议中定义了在HTTP请求中如何缓存数据</p> <h2 id=expires->Expires 响应头</h2> <p>指定内容缓存失效时间</p> <pre class=hljs><code class="language-undefined"><span class=hljs-meta>#</span><span class=bash> Expires: &lt;http-date&gt;</span>\n<span class=hljs-meta>#</span><span class=bash> Exampale</span>\nExpires: Wed, 21 Oct 2015 07:28:00 GMT</code></pre><p>表明缓存可以保存的时间，如果当前时间早于这个时间，那么可以使用缓存的副本，可以不向服务器再次请求</p> <h2 id=cache-control->Cache-Control 响应头</h2> <h3 id=max-age><code>max-age</code></h3> <p>指定缓存生存时间</p> <p>示例：</p> <pre class=hljs><code class="language-undefined"><span class=hljs-keyword>Cache</span><span class=hljs-params>-Control</span>: <span class=hljs-keyword>max</span><span class=hljs-params>-age</span>=<span class=hljs-number>3600</span></code></pre><p>表示当收到响应后，在3600秒内，如果再次请求数据，可以使用缓存的副本，不需要再次向服务器请求数据</p> <h3 id=public><code>public</code></h3> <p>表示这是一个开放资源，可以进行缓存</p> <h3 id=private><code>private</code></h3> <p>表示这是一个私有资源，代理服务器不得缓存</p> <h3 id=must-revalidate><code>must-revalidate</code></h3> <p>当发生请求时，必须向服务器再次验证数据</p> <h2 id=->验证数据相关响应头</h2> <h3 id=etag><code>Etag</code></h3> <p>用于验证当前数据的内容版本的标示符</p> <p>这可以让缓存更高效，并节省带宽，因为如果内容没有改变，Web服务器不需要发送完整的响应。而如果内容发生了变化，使用ETag有助于防止资源的同时更新相互覆盖（“空中碰撞”）。</p> <p>如果给定URL中的资源更改，则一定要生成新的Etag值。 因此Etags类似于指纹，也可能被某些服务器用于跟踪。 比较etags能快速确定此资源是否变化，但也可能被跟踪服务器永久存留。</p> <pre class=hljs><code class="language-undefined"><span class=hljs-symbol>ETag:</span> W/<span class=hljs-string>"&lt;etag_value&gt;"</span>\n<span class=hljs-symbol>ETag:</span> <span class=hljs-string>"&lt;etag_value&gt;"</span></code></pre><ul> <li><p>/W &#39;W/&#39;(大小写敏感) 表示使用弱验证器。 弱验证器很容易生成，但不利于比较。 强验证器是比较的理想选择，但很难有效地生成。 相同资源的两个弱Etag值可能语义等同，但不是每个字节都相同。</p> </li> <li><p>&quot;<etag_value>&quot; 实体标签唯一地表示所请求的资源。 它们是位于双引号之间的ASCII字符串（如“675af34563dc-tr34”）。</etag_value></p> </li> </ul> <h4 id=->避免“空中碰撞”</h4> <p>在 <code>ETag</code> 和 <code>If-Match</code> 头部的帮助下，可以检测到&quot;空中碰撞&quot;的编辑冲突。</p> <p>在 <code>POST</code> 请求头中包含 <code>If-Match</code> 头来检查是否最新版本。</p> <pre class=hljs><code class="language-undefined"><span class=hljs-keyword>If</span>-Match: <span class=hljs-string>"33a64df551"</span></code></pre><p>如果哈希值不匹配，则发送412前提条件失败错误</p> <h4 id=->缓存未更改的资源</h4> <p>当用户再次请求对应资源时，会携带<code>if-none-match</code>头来</p> <pre class=hljs><code class="language-undefined"><span class=hljs-keyword>If</span>-<span class=hljs-keyword>None</span>-Match: <span class=hljs-string>"33a64df551"</span></code></pre><p>服务器收到后，检查是否和当前<code>etag</code>匹配，如果相同，则发送304响应，不包含任何内容，标示客户端可以使用缓存数据</p> <h3 id=last-modified><code>last-modified</code></h3> <p>包含源头服务器认定的资源做出修改的日期及时间。</p> <p>它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。由于精确度比 <code>ETag</code> 要低，所以这是一个备用机制。</p> <pre class=hljs><code class="language-undefined">Last-Modified: <span class=hljs-tag>&lt;<span class=hljs-name>day-name</span>&gt;</span>, <span class=hljs-tag>&lt;<span class=hljs-name>day</span>&gt;</span> <span class=hljs-tag>&lt;<span class=hljs-name>month</span>&gt;</span> <span class=hljs-tag>&lt;<span class=hljs-name>year</span>&gt;</span> <span class=hljs-tag>&lt;<span class=hljs-name>hour</span>&gt;</span>:<span class=hljs-tag>&lt;<span class=hljs-name>minute</span>&gt;</span>:<span class=hljs-tag>&lt;<span class=hljs-name>second</span>&gt;</span> GMT</code></pre><ul> <li><code>&lt;day-name&gt;</code> &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot; 或 &quot;Sun&quot; 之一 （区分大小写）。</li> <li><code>&lt;day&gt;</code> 两位数字表示的天数, 例如&quot;04&quot; or &quot;23&quot;。</li> <li><code>&lt;month&gt;</code> &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot; 之一（区分大小写）。</li> <li><code>&lt;year&gt;</code> 4位数字表示的年份, 例如 &quot;1990&quot; 或者&quot;2016&quot;。</li> <li><code>&lt;hour&gt;</code> 两位数字表示的小时数, 例如 &quot;09&quot; 或者 &quot;23&quot;。</li> <li><code>&lt;minute&gt;</code> 两位数字表示的分钟数，例如&quot;04&quot; 或者 &quot;59&quot;。</li> <li><code>&lt;second&gt;</code> 两位数字表示的秒数，例如 &quot;04&quot; 或者 &quot;59&quot;。</li> <li><code>GMT</code> 国际标准时间。HTTP中的时间均用国际标准时间表示，从来不使用当地时间。</li> </ul> <h4 id=->避免“空中碰撞”</h4> <p>在 <code>Last-Modified</code> 和 <code>If-Unmodified-Since</code> 头部的帮助下，可以检测到&quot;空中碰撞&quot;的编辑冲突。</p> <p>在 <code>POST</code> 请求头中包含 <code>If-Unmodified-Since</code> 头来检查是否最新版本。</p> <pre class=hljs><code class="language-undefined"><span class=hljs-built_in>If</span>-Unmodified-<span class=hljs-built_in>Sin</span><span class=hljs-symbol>ce:</span> &lt;<span class=hljs-built_in>day</span>-name&gt;, &lt;<span class=hljs-built_in>day</span>&gt; &lt;<span class=hljs-built_in>month</span>&gt; &lt;<span class=hljs-built_in>year</span>&gt; &lt;<span class=hljs-built_in>hour</span>&gt;<span class=hljs-symbol>:</span>&lt;<span class=hljs-built_in>minute</span>&gt;<span class=hljs-symbol>:</span>&lt;<span class=hljs-built_in>second</span>&gt; GMT</code></pre><p>如果请求资源在时间之后做了修改，则返回412前提条件失败错误</p> <h4 id=->缓存未更改的资源</h4> <p>当用户再次请求对应资源时，会携带<code>If-Modified-Since</code>头来匹配资源，如果在给定日期后做了修改，则需要正常响应</p> <pre class=hljs><code class="language-undefined"><span class=hljs-built_in>If</span>-Modified-<span class=hljs-built_in>Sin</span><span class=hljs-symbol>ce:</span> &lt;<span class=hljs-built_in>day</span>-name&gt;, &lt;<span class=hljs-built_in>day</span>&gt; &lt;<span class=hljs-built_in>month</span>&gt; &lt;<span class=hljs-built_in>year</span>&gt; &lt;<span class=hljs-built_in>hour</span>&gt;<span class=hljs-symbol>:</span>&lt;<span class=hljs-built_in>minute</span>&gt;<span class=hljs-symbol>:</span>&lt;<span class=hljs-built_in>second</span>&gt; GMT</code></pre><p>服务器收到后，检查是否和当前<code>If-Modified-Since</code>时间，如果在给定日期后没有修改，则发送304响应，不包含任何内容，标示客户端可以使用缓存数据</p> '}}]);